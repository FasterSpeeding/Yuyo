[build-system]
requires = ["flit_core >=3.3,<4"]
build-backend = "flit_core.buildapi"

[project]
name = "hikari-yuyo"
version = "1.4.0a1.post1"
readme = "README.md"
requires-python = ">=3.8.0,<3.12"
license = {file = "LICENSE"}
authors = [ {name = "Faster Speeding", email="lucina@lmbyrne.dev"} ]
keywords= ["hikari"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "License :: OSI Approved :: BSD License",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Communications :: Chat",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities",
    "Typing :: Typed"
]
dependencies = ["alluka~=0.1.2", "hikari~=2.0.0.dev112"]
dynamic = ["description"]

[project.optional-dependencies]
asgi = ["asgiref~=3.0", "hikari[server]"]
sake = ["hikari-sake>=1.0.4a1, <2.0.0"]

[project.urls]
Homepage = "https://github.com/FasterSpeeding/Yuyo"
Repository = "https://github.com/FasterSpeeding/Yuyo"
Documentation = "https://yuyo.cursed.solutions/"
Changelog = "https://github.com/FasterSpeeding/Yuyo/blob/master/CHANGELOG.md"

[tool.flit.module]
name = "yuyo"

[tool.black]
line-length     = 120
target-version  = ["py38"]
include         = ".*pyi?$"

[tool.coverage.run]
concurrency = ["multiprocessing"]
parallel = true
branch = true
timid = false
source = ["yuyo"]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "^\\s*\\.\\.\\.$",
    "^\\s*@abc.abstractmethod$",
    "^if typing.TYPE_CHECKING:$"
]

[tool.flake8]
count = true
max-complexity = 20
max-function-length = 130
# Technically this is 120, but black has a policy of "1 or 2 over is fine if it is tidier", so we have to raise this.
max-line-length = 130
show_source = false
statistics = false
accept-encodings = "utf-8"
docstring-convention = "numpy"
ignore-decorators = "overload"
ignore = [
    "A003",   # class attribute is shadowing a builtin
    "CFQ004", # Function has too many returns.
    "CFQ002", # Function has too many arguments.
    "D102",   # Missing docstring in public method.
    "D105",   # Magic methods not having a docstring.
    "D401",   # Conflits with property doc-strings too much.
    "D404",   # Conflits with property doc-strings too much.
    "D412",   # No blank lines allowed between a section header and its content
    "E402",   # Module level import not at top of file (isn't compatible with our import style).
    "IFS001", # "use a oneliner here".
    "T101",   # TO-DO comment detection (T102 is FIX-ME and T103 is XXX).
    "W503",   # line break before binary operator.
    "W504",   # line break before binary operator (again, I guess).
    "S101",   # Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.
    "E203",   # whitespace before ':'
    "E231",   # missing whitespace after ','
]
per-file-ignores = [
    # Doc errors don't matter in the tests, noxfile nor py.typed
    "noxfile.py: D100, D101, D103",
    "tests/*.py: D100, D101, D103, D104",
    "yuyo/py.typed: D100",
]

[tool.isort]
profile = "black"
force_single_line = true

[tool.pyright]
include = ["examples", "noxfile.py", "tests", "yuyo"]

pythonVersion = "3.8"
typeCheckingMode = "strict"
reportMissingModuleSource = "error"
reportMissingTypeStubs = "error"

reportIncompatibleMethodOverride = "warning"    # This relies on ordering for key-word only arguments
                                                # which is more annoying than it's worth
reportUnknownMemberType = "warning"             # This messes with instance checking generic objects
reportUnknownArgumentType = "warning"           # Pretty much the same as reportUnknownMemberType
reportUnknownLambdaType = "warning"
reportImportCycles = "warning"                  # This isn't necessarily an issue if it's type checking only.
reportUnknownVariableType = "warning"           # Lotta false-positives, might fix/change later.

[tool.pytest.ini_options]
asyncio_mode = "strict"
testpaths = ["tests"]
required_plugins = ["pytest-asyncio"]

[tool.mypy]
# some good strict settings
python_version = 3.9
strict = true
warn_unreachable = true

# more narrow type ignores
show_error_codes = true

# these are used by pyright
warn_unused_ignores = false
warn_redundant_casts = false

# compatibility with pyright
allow_redefinition = true
disable_error_code = ["type-abstract"]

[tool.slotscheck]
strict-imports = true
require-superclass = true
require-subclass = true
exclude-classes = """.*Proto"""
